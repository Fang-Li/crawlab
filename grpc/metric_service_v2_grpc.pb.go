// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: services/metric_service_v2.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MetricServiceV2_Send_FullMethodName = "/grpc.MetricServiceV2/Send"
)

// MetricServiceV2Client is the client API for MetricServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceV2Client interface {
	Send(ctx context.Context, in *MetricServiceV2SendRequest, opts ...grpc.CallOption) (*Response, error)
}

type metricServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceV2Client(cc grpc.ClientConnInterface) MetricServiceV2Client {
	return &metricServiceV2Client{cc}
}

func (c *metricServiceV2Client) Send(ctx context.Context, in *MetricServiceV2SendRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, MetricServiceV2_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServiceV2Server is the server API for MetricServiceV2 service.
// All implementations must embed UnimplementedMetricServiceV2Server
// for forward compatibility
type MetricServiceV2Server interface {
	Send(context.Context, *MetricServiceV2SendRequest) (*Response, error)
	mustEmbedUnimplementedMetricServiceV2Server()
}

// UnimplementedMetricServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedMetricServiceV2Server struct {
}

func (UnimplementedMetricServiceV2Server) Send(context.Context, *MetricServiceV2SendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMetricServiceV2Server) mustEmbedUnimplementedMetricServiceV2Server() {}

// UnsafeMetricServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceV2Server will
// result in compilation errors.
type UnsafeMetricServiceV2Server interface {
	mustEmbedUnimplementedMetricServiceV2Server()
}

func RegisterMetricServiceV2Server(s grpc.ServiceRegistrar, srv MetricServiceV2Server) {
	s.RegisterService(&MetricServiceV2_ServiceDesc, srv)
}

func _MetricServiceV2_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricServiceV2SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceV2Server).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricServiceV2_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceV2Server).Send(ctx, req.(*MetricServiceV2SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricServiceV2_ServiceDesc is the grpc.ServiceDesc for MetricServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MetricServiceV2",
	HandlerType: (*MetricServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MetricServiceV2_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/metric_service_v2.proto",
}
