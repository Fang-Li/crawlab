// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: services/model_base_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelBaseService_GetById_FullMethodName     = "/grpc.ModelBaseService/GetById"
	ModelBaseService_GetOne_FullMethodName      = "/grpc.ModelBaseService/GetOne"
	ModelBaseService_GetMany_FullMethodName     = "/grpc.ModelBaseService/GetMany"
	ModelBaseService_DeleteById_FullMethodName  = "/grpc.ModelBaseService/DeleteById"
	ModelBaseService_DeleteOne_FullMethodName   = "/grpc.ModelBaseService/DeleteOne"
	ModelBaseService_DeleteMany_FullMethodName  = "/grpc.ModelBaseService/DeleteMany"
	ModelBaseService_UpdateById_FullMethodName  = "/grpc.ModelBaseService/UpdateById"
	ModelBaseService_UpdateOne_FullMethodName   = "/grpc.ModelBaseService/UpdateOne"
	ModelBaseService_UpdateMany_FullMethodName  = "/grpc.ModelBaseService/UpdateMany"
	ModelBaseService_ReplaceById_FullMethodName = "/grpc.ModelBaseService/ReplaceById"
	ModelBaseService_ReplaceOne_FullMethodName  = "/grpc.ModelBaseService/ReplaceOne"
	ModelBaseService_InsertOne_FullMethodName   = "/grpc.ModelBaseService/InsertOne"
	ModelBaseService_InsertMany_FullMethodName  = "/grpc.ModelBaseService/InsertMany"
	ModelBaseService_UpsertOne_FullMethodName   = "/grpc.ModelBaseService/UpsertOne"
	ModelBaseService_Count_FullMethodName       = "/grpc.ModelBaseService/Count"
)

// ModelBaseServiceClient is the client API for ModelBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelBaseServiceClient interface {
	GetById(ctx context.Context, in *ModelServiceGetByIdRequest, opts ...grpc.CallOption) (*Response, error)
	GetOne(ctx context.Context, in *ModelServiceGetOneRequest, opts ...grpc.CallOption) (*Response, error)
	GetMany(ctx context.Context, in *ModelServiceGetManyRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteById(ctx context.Context, in *ModelServiceDeleteByIdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteOne(ctx context.Context, in *ModelServiceDeleteOneRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteMany(ctx context.Context, in *ModelServiceDeleteManyRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateById(ctx context.Context, in *ModelServiceUpdateByIdRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateOne(ctx context.Context, in *ModelServiceUpdateOneRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateMany(ctx context.Context, in *ModelServiceUpdateManyRequest, opts ...grpc.CallOption) (*Response, error)
	ReplaceById(ctx context.Context, in *ModelServiceReplaceByIdRequest, opts ...grpc.CallOption) (*Response, error)
	ReplaceOne(ctx context.Context, in *ModelServiceReplaceOneRequest, opts ...grpc.CallOption) (*Response, error)
	InsertOne(ctx context.Context, in *ModelServiceInsertOneRequest, opts ...grpc.CallOption) (*Response, error)
	InsertMany(ctx context.Context, in *ModelServiceInsertManyRequest, opts ...grpc.CallOption) (*Response, error)
	UpsertOne(ctx context.Context, in *ModelServiceUpsertOneRequest, opts ...grpc.CallOption) (*Response, error)
	Count(ctx context.Context, in *ModelServiceCountRequest, opts ...grpc.CallOption) (*Response, error)
}

type modelBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelBaseServiceClient(cc grpc.ClientConnInterface) ModelBaseServiceClient {
	return &modelBaseServiceClient{cc}
}

func (c *modelBaseServiceClient) GetById(ctx context.Context, in *ModelServiceGetByIdRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) GetOne(ctx context.Context, in *ModelServiceGetOneRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_GetOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) GetMany(ctx context.Context, in *ModelServiceGetManyRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_GetMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) DeleteById(ctx context.Context, in *ModelServiceDeleteByIdRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_DeleteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) DeleteOne(ctx context.Context, in *ModelServiceDeleteOneRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_DeleteOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) DeleteMany(ctx context.Context, in *ModelServiceDeleteManyRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_DeleteMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) UpdateById(ctx context.Context, in *ModelServiceUpdateByIdRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_UpdateById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) UpdateOne(ctx context.Context, in *ModelServiceUpdateOneRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_UpdateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) UpdateMany(ctx context.Context, in *ModelServiceUpdateManyRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_UpdateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) ReplaceById(ctx context.Context, in *ModelServiceReplaceByIdRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_ReplaceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) ReplaceOne(ctx context.Context, in *ModelServiceReplaceOneRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_ReplaceOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) InsertOne(ctx context.Context, in *ModelServiceInsertOneRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_InsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) InsertMany(ctx context.Context, in *ModelServiceInsertManyRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_InsertMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) UpsertOne(ctx context.Context, in *ModelServiceUpsertOneRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_UpsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceClient) Count(ctx context.Context, in *ModelServiceCountRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ModelBaseService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelBaseServiceServer is the server API for ModelBaseService service.
// All implementations must embed UnimplementedModelBaseServiceServer
// for forward compatibility.
type ModelBaseServiceServer interface {
	GetById(context.Context, *ModelServiceGetByIdRequest) (*Response, error)
	GetOne(context.Context, *ModelServiceGetOneRequest) (*Response, error)
	GetMany(context.Context, *ModelServiceGetManyRequest) (*Response, error)
	DeleteById(context.Context, *ModelServiceDeleteByIdRequest) (*Response, error)
	DeleteOne(context.Context, *ModelServiceDeleteOneRequest) (*Response, error)
	DeleteMany(context.Context, *ModelServiceDeleteManyRequest) (*Response, error)
	UpdateById(context.Context, *ModelServiceUpdateByIdRequest) (*Response, error)
	UpdateOne(context.Context, *ModelServiceUpdateOneRequest) (*Response, error)
	UpdateMany(context.Context, *ModelServiceUpdateManyRequest) (*Response, error)
	ReplaceById(context.Context, *ModelServiceReplaceByIdRequest) (*Response, error)
	ReplaceOne(context.Context, *ModelServiceReplaceOneRequest) (*Response, error)
	InsertOne(context.Context, *ModelServiceInsertOneRequest) (*Response, error)
	InsertMany(context.Context, *ModelServiceInsertManyRequest) (*Response, error)
	UpsertOne(context.Context, *ModelServiceUpsertOneRequest) (*Response, error)
	Count(context.Context, *ModelServiceCountRequest) (*Response, error)
	mustEmbedUnimplementedModelBaseServiceServer()
}

// UnimplementedModelBaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelBaseServiceServer struct{}

func (UnimplementedModelBaseServiceServer) GetById(context.Context, *ModelServiceGetByIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedModelBaseServiceServer) GetOne(context.Context, *ModelServiceGetOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedModelBaseServiceServer) GetMany(context.Context, *ModelServiceGetManyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedModelBaseServiceServer) DeleteById(context.Context, *ModelServiceDeleteByIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedModelBaseServiceServer) DeleteOne(context.Context, *ModelServiceDeleteOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedModelBaseServiceServer) DeleteMany(context.Context, *ModelServiceDeleteManyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedModelBaseServiceServer) UpdateById(context.Context, *ModelServiceUpdateByIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateById not implemented")
}
func (UnimplementedModelBaseServiceServer) UpdateOne(context.Context, *ModelServiceUpdateOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedModelBaseServiceServer) UpdateMany(context.Context, *ModelServiceUpdateManyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedModelBaseServiceServer) ReplaceById(context.Context, *ModelServiceReplaceByIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceById not implemented")
}
func (UnimplementedModelBaseServiceServer) ReplaceOne(context.Context, *ModelServiceReplaceOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceOne not implemented")
}
func (UnimplementedModelBaseServiceServer) InsertOne(context.Context, *ModelServiceInsertOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOne not implemented")
}
func (UnimplementedModelBaseServiceServer) InsertMany(context.Context, *ModelServiceInsertManyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMany not implemented")
}
func (UnimplementedModelBaseServiceServer) UpsertOne(context.Context, *ModelServiceUpsertOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOne not implemented")
}
func (UnimplementedModelBaseServiceServer) Count(context.Context, *ModelServiceCountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedModelBaseServiceServer) mustEmbedUnimplementedModelBaseServiceServer() {}
func (UnimplementedModelBaseServiceServer) testEmbeddedByValue()                          {}

// UnsafeModelBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelBaseServiceServer will
// result in compilation errors.
type UnsafeModelBaseServiceServer interface {
	mustEmbedUnimplementedModelBaseServiceServer()
}

func RegisterModelBaseServiceServer(s grpc.ServiceRegistrar, srv ModelBaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelBaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelBaseService_ServiceDesc, srv)
}

func _ModelBaseService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).GetById(ctx, req.(*ModelServiceGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).GetOne(ctx, req.(*ModelServiceGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceGetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_GetMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).GetMany(ctx, req.(*ModelServiceGetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceDeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).DeleteById(ctx, req.(*ModelServiceDeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_DeleteOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).DeleteOne(ctx, req.(*ModelServiceDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).DeleteMany(ctx, req.(*ModelServiceDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_UpdateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceUpdateByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).UpdateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_UpdateById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).UpdateById(ctx, req.(*ModelServiceUpdateByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceUpdateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_UpdateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).UpdateOne(ctx, req.(*ModelServiceUpdateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceUpdateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_UpdateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).UpdateMany(ctx, req.(*ModelServiceUpdateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_ReplaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceReplaceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).ReplaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_ReplaceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).ReplaceById(ctx, req.(*ModelServiceReplaceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_ReplaceOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceReplaceOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).ReplaceOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_ReplaceOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).ReplaceOne(ctx, req.(*ModelServiceReplaceOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceInsertOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_InsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).InsertOne(ctx, req.(*ModelServiceInsertOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_InsertMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceInsertManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).InsertMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_InsertMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).InsertMany(ctx, req.(*ModelServiceInsertManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_UpsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceUpsertOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).UpsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_UpsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).UpsertOne(ctx, req.(*ModelServiceUpsertOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelServiceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelBaseService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceServer).Count(ctx, req.(*ModelServiceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelBaseService_ServiceDesc is the grpc.ServiceDesc for ModelBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ModelBaseService",
	HandlerType: (*ModelBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _ModelBaseService_GetById_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _ModelBaseService_GetOne_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _ModelBaseService_GetMany_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _ModelBaseService_DeleteById_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _ModelBaseService_DeleteOne_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _ModelBaseService_DeleteMany_Handler,
		},
		{
			MethodName: "UpdateById",
			Handler:    _ModelBaseService_UpdateById_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _ModelBaseService_UpdateOne_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _ModelBaseService_UpdateMany_Handler,
		},
		{
			MethodName: "ReplaceById",
			Handler:    _ModelBaseService_ReplaceById_Handler,
		},
		{
			MethodName: "ReplaceOne",
			Handler:    _ModelBaseService_ReplaceOne_Handler,
		},
		{
			MethodName: "InsertOne",
			Handler:    _ModelBaseService_InsertOne_Handler,
		},
		{
			MethodName: "InsertMany",
			Handler:    _ModelBaseService_InsertMany_Handler,
		},
		{
			MethodName: "UpsertOne",
			Handler:    _ModelBaseService_UpsertOne_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ModelBaseService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/model_base_service.proto",
}
