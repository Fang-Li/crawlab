// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: services/dependency_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DependencyService_Connect_FullMethodName       = "/grpc.DependencyService/Connect"
	DependencyService_Sync_FullMethodName          = "/grpc.DependencyService/Sync"
	DependencyService_UpdateTaskLog_FullMethodName = "/grpc.DependencyService/UpdateTaskLog"
)

// DependencyServiceClient is the client API for DependencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyServiceClient interface {
	Connect(ctx context.Context, in *DependencyServiceConnectRequest, opts ...grpc.CallOption) (DependencyService_ConnectClient, error)
	Sync(ctx context.Context, in *DependencyServiceSyncRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateTaskLog(ctx context.Context, opts ...grpc.CallOption) (DependencyService_UpdateTaskLogClient, error)
}

type dependencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyServiceClient(cc grpc.ClientConnInterface) DependencyServiceClient {
	return &dependencyServiceClient{cc}
}

func (c *dependencyServiceClient) Connect(ctx context.Context, in *DependencyServiceConnectRequest, opts ...grpc.CallOption) (DependencyService_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DependencyService_ServiceDesc.Streams[0], DependencyService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyServiceConnectClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DependencyService_ConnectClient interface {
	Recv() (*DependencyServiceConnectResponse, error)
	grpc.ClientStream
}

type dependencyServiceConnectClient struct {
	grpc.ClientStream
}

func (x *dependencyServiceConnectClient) Recv() (*DependencyServiceConnectResponse, error) {
	m := new(DependencyServiceConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dependencyServiceClient) Sync(ctx context.Context, in *DependencyServiceSyncRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DependencyService_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyServiceClient) UpdateTaskLog(ctx context.Context, opts ...grpc.CallOption) (DependencyService_UpdateTaskLogClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DependencyService_ServiceDesc.Streams[1], DependencyService_UpdateTaskLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyServiceUpdateTaskLogClient{ClientStream: stream}
	return x, nil
}

type DependencyService_UpdateTaskLogClient interface {
	Send(*DependencyServiceUpdateTaskLogRequest) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type dependencyServiceUpdateTaskLogClient struct {
	grpc.ClientStream
}

func (x *dependencyServiceUpdateTaskLogClient) Send(m *DependencyServiceUpdateTaskLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dependencyServiceUpdateTaskLogClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyServiceServer is the server API for DependencyService service.
// All implementations must embed UnimplementedDependencyServiceServer
// for forward compatibility
type DependencyServiceServer interface {
	Connect(*DependencyServiceConnectRequest, DependencyService_ConnectServer) error
	Sync(context.Context, *DependencyServiceSyncRequest) (*Response, error)
	UpdateTaskLog(DependencyService_UpdateTaskLogServer) error
	mustEmbedUnimplementedDependencyServiceServer()
}

// UnimplementedDependencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDependencyServiceServer struct {
}

func (UnimplementedDependencyServiceServer) Connect(*DependencyServiceConnectRequest, DependencyService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDependencyServiceServer) Sync(context.Context, *DependencyServiceSyncRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedDependencyServiceServer) UpdateTaskLog(DependencyService_UpdateTaskLogServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateTaskLog not implemented")
}
func (UnimplementedDependencyServiceServer) mustEmbedUnimplementedDependencyServiceServer() {}

// UnsafeDependencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyServiceServer will
// result in compilation errors.
type UnsafeDependencyServiceServer interface {
	mustEmbedUnimplementedDependencyServiceServer()
}

func RegisterDependencyServiceServer(s grpc.ServiceRegistrar, srv DependencyServiceServer) {
	s.RegisterService(&DependencyService_ServiceDesc, srv)
}

func _DependencyService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyServiceConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DependencyServiceServer).Connect(m, &dependencyServiceConnectServer{ServerStream: stream})
}

type DependencyService_ConnectServer interface {
	Send(*DependencyServiceConnectResponse) error
	grpc.ServerStream
}

type dependencyServiceConnectServer struct {
	grpc.ServerStream
}

func (x *dependencyServiceConnectServer) Send(m *DependencyServiceConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DependencyService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependencyServiceSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DependencyService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyServiceServer).Sync(ctx, req.(*DependencyServiceSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyService_UpdateTaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DependencyServiceServer).UpdateTaskLog(&dependencyServiceUpdateTaskLogServer{ServerStream: stream})
}

type DependencyService_UpdateTaskLogServer interface {
	SendAndClose(*Response) error
	Recv() (*DependencyServiceUpdateTaskLogRequest, error)
	grpc.ServerStream
}

type dependencyServiceUpdateTaskLogServer struct {
	grpc.ServerStream
}

func (x *dependencyServiceUpdateTaskLogServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dependencyServiceUpdateTaskLogServer) Recv() (*DependencyServiceUpdateTaskLogRequest, error) {
	m := new(DependencyServiceUpdateTaskLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyService_ServiceDesc is the grpc.ServiceDesc for DependencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DependencyService",
	HandlerType: (*DependencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _DependencyService_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DependencyService_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateTaskLog",
			Handler:       _DependencyService_UpdateTaskLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/dependency_service.proto",
}
