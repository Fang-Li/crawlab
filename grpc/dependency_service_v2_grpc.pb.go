// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: services/dependency_service_v2.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DependencyServiceV2_Connect_FullMethodName       = "/grpc.DependencyServiceV2/Connect"
	DependencyServiceV2_Sync_FullMethodName          = "/grpc.DependencyServiceV2/Sync"
	DependencyServiceV2_UpdateTaskLog_FullMethodName = "/grpc.DependencyServiceV2/UpdateTaskLog"
)

// DependencyServiceV2Client is the client API for DependencyServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyServiceV2Client interface {
	Connect(ctx context.Context, in *DependencyServiceV2ConnectRequest, opts ...grpc.CallOption) (DependencyServiceV2_ConnectClient, error)
	Sync(ctx context.Context, in *DependencyServiceV2SyncRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateTaskLog(ctx context.Context, opts ...grpc.CallOption) (DependencyServiceV2_UpdateTaskLogClient, error)
}

type dependencyServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewDependencyServiceV2Client(cc grpc.ClientConnInterface) DependencyServiceV2Client {
	return &dependencyServiceV2Client{cc}
}

func (c *dependencyServiceV2Client) Connect(ctx context.Context, in *DependencyServiceV2ConnectRequest, opts ...grpc.CallOption) (DependencyServiceV2_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DependencyServiceV2_ServiceDesc.Streams[0], DependencyServiceV2_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyServiceV2ConnectClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DependencyServiceV2_ConnectClient interface {
	Recv() (*DependencyServiceV2ConnectResponse, error)
	grpc.ClientStream
}

type dependencyServiceV2ConnectClient struct {
	grpc.ClientStream
}

func (x *dependencyServiceV2ConnectClient) Recv() (*DependencyServiceV2ConnectResponse, error) {
	m := new(DependencyServiceV2ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dependencyServiceV2Client) Sync(ctx context.Context, in *DependencyServiceV2SyncRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DependencyServiceV2_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyServiceV2Client) UpdateTaskLog(ctx context.Context, opts ...grpc.CallOption) (DependencyServiceV2_UpdateTaskLogClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DependencyServiceV2_ServiceDesc.Streams[1], DependencyServiceV2_UpdateTaskLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyServiceV2UpdateTaskLogClient{ClientStream: stream}
	return x, nil
}

type DependencyServiceV2_UpdateTaskLogClient interface {
	Send(*DependencyServiceV2UpdateTaskLogRequest) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type dependencyServiceV2UpdateTaskLogClient struct {
	grpc.ClientStream
}

func (x *dependencyServiceV2UpdateTaskLogClient) Send(m *DependencyServiceV2UpdateTaskLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dependencyServiceV2UpdateTaskLogClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyServiceV2Server is the server API for DependencyServiceV2 service.
// All implementations must embed UnimplementedDependencyServiceV2Server
// for forward compatibility
type DependencyServiceV2Server interface {
	Connect(*DependencyServiceV2ConnectRequest, DependencyServiceV2_ConnectServer) error
	Sync(context.Context, *DependencyServiceV2SyncRequest) (*Response, error)
	UpdateTaskLog(DependencyServiceV2_UpdateTaskLogServer) error
	mustEmbedUnimplementedDependencyServiceV2Server()
}

// UnimplementedDependencyServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedDependencyServiceV2Server struct {
}

func (UnimplementedDependencyServiceV2Server) Connect(*DependencyServiceV2ConnectRequest, DependencyServiceV2_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDependencyServiceV2Server) Sync(context.Context, *DependencyServiceV2SyncRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedDependencyServiceV2Server) UpdateTaskLog(DependencyServiceV2_UpdateTaskLogServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateTaskLog not implemented")
}
func (UnimplementedDependencyServiceV2Server) mustEmbedUnimplementedDependencyServiceV2Server() {}

// UnsafeDependencyServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyServiceV2Server will
// result in compilation errors.
type UnsafeDependencyServiceV2Server interface {
	mustEmbedUnimplementedDependencyServiceV2Server()
}

func RegisterDependencyServiceV2Server(s grpc.ServiceRegistrar, srv DependencyServiceV2Server) {
	s.RegisterService(&DependencyServiceV2_ServiceDesc, srv)
}

func _DependencyServiceV2_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyServiceV2ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DependencyServiceV2Server).Connect(m, &dependencyServiceV2ConnectServer{ServerStream: stream})
}

type DependencyServiceV2_ConnectServer interface {
	Send(*DependencyServiceV2ConnectResponse) error
	grpc.ServerStream
}

type dependencyServiceV2ConnectServer struct {
	grpc.ServerStream
}

func (x *dependencyServiceV2ConnectServer) Send(m *DependencyServiceV2ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DependencyServiceV2_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependencyServiceV2SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyServiceV2Server).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DependencyServiceV2_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyServiceV2Server).Sync(ctx, req.(*DependencyServiceV2SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyServiceV2_UpdateTaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DependencyServiceV2Server).UpdateTaskLog(&dependencyServiceV2UpdateTaskLogServer{ServerStream: stream})
}

type DependencyServiceV2_UpdateTaskLogServer interface {
	SendAndClose(*Response) error
	Recv() (*DependencyServiceV2UpdateTaskLogRequest, error)
	grpc.ServerStream
}

type dependencyServiceV2UpdateTaskLogServer struct {
	grpc.ServerStream
}

func (x *dependencyServiceV2UpdateTaskLogServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dependencyServiceV2UpdateTaskLogServer) Recv() (*DependencyServiceV2UpdateTaskLogRequest, error) {
	m := new(DependencyServiceV2UpdateTaskLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyServiceV2_ServiceDesc is the grpc.ServiceDesc for DependencyServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DependencyServiceV2",
	HandlerType: (*DependencyServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _DependencyServiceV2_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DependencyServiceV2_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateTaskLog",
			Handler:       _DependencyServiceV2_UpdateTaskLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/dependency_service_v2.proto",
}
